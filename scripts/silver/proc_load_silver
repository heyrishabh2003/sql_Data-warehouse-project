
/*
===============================================================================
Stored Procedure: Load Silver Layer (Bronze -> Silver)
===============================================================================

Script Purpose:
    This stored procedure performs the ETL (Extract, Transform, Load) process to
    populate the 'silver' schema tables from the 'bronze' schema.
    Actions Performed:
    - Truncates Silver tables.
    - Inserts transformed and cleansed data from Bronze into Silver tables.

Parameters:
    None.
    This stored procedure does not accept any parameters or return any values.

Usage Example:
    EXEC Silver.load_silver;

===============================================================================
*/



EXEC silver.load_silver
-- DROP IF EXISTS (Optional)
IF OBJECT_ID('silver.load_silver', 'P') IS NOT NULL
    DROP PROCEDURE silver.load_silver;
GO

CREATE PROCEDURE silver.load_silver
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @startTime DATETIME = GETDATE();
    DECLARE @sectionStart DATETIME;
    DECLARE @sectionEnd DATETIME;

    BEGIN TRY

        -- Load crm_cust_info
        SET @sectionStart = GETDATE();
        PRINT 'Starting Load: silver.crm_cust_info';
        TRUNCATE TABLE silver.crm_cust_info;
        INSERT INTO silver.crm_cust_info (
            cst_id,
            cst_key,
            cst_first_name,
            cst_last_name,
            cst_marital_status,
            cst_gndr,
            cst_create_date
        )
        SELECT
            cst_id,
            cst_key,
            TRIM(cst_first_name),
            TRIM(cst_last_name),
            CASE 
                WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single' 
                WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married' 
                ELSE 'n/a'
            END,
            CASE 
                WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female' 
                WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male' 
                ELSE 'n/a'
            END,
            cst_create_date
        FROM (
            SELECT *, ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
            FROM bronze.crm_cust_info
            WHERE cst_id IS NOT NULL
        ) t
        WHERE flag_last = 1;
        SET @sectionEnd = GETDATE();
        PRINT 'Finished Load: silver.crm_cust_info in ' + CAST(DATEDIFF(SECOND, @sectionStart, @sectionEnd) AS VARCHAR) + ' seconds';

        -- Load crm_prd_info
        SET @sectionStart = GETDATE();
        PRINT 'Starting Load: silver.crm_prd_info';
        TRUNCATE TABLE silver.crm_prd_info;
        INSERT INTO silver.crm_prd_info (
            prd_id,
            cat_id,
            prd_key,
            prd_nm,
            prd_cost,
            prd_line,
            prd_start_dt,
            prd_end_dt
        )
        SELECT
            prd_id,
            REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_'),
            SUBSTRING(prd_key, 7, LEN(prd_key)),
            prd_nm,
            ISNULL(prd_cost, 0),
            CASE
                WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
                WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
                WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other Sales'
                WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
                ELSE 'n/a'
            END,
            CAST(prd_start_dt AS DATE),
            CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt) - 1 AS DATE)
        FROM bronze.crm_prd_info;
        SET @sectionEnd = GETDATE();
        PRINT 'Finished Load: silver.crm_prd_info in ' + CAST(DATEDIFF(SECOND, @sectionStart, @sectionEnd) AS VARCHAR) + ' seconds';

        -- Load crm_sales_details
        SET @sectionStart = GETDATE();
        PRINT 'Starting Load: silver.crm_sales_details';
        TRUNCATE TABLE silver.crm_sales_details;
        INSERT INTO silver.crm_sales_details (
            sls_ord_num,
            sls_prd_key,
            sls_cust_id,
            sls_order_dt,
            sls_ship_dt,
            sls_due_dt,
            sls_quantity,
            sls_sales,
            sls_price
        )
        SELECT 
            sls_ord_num,
            sls_prd_key,
            sls_cust_id,
            COALESCE(
                CASE 
                    WHEN LEN(sls_order_dt) != 8 OR ISNUMERIC(sls_order_dt) = 0 THEN NULL
                    ELSE CAST(STUFF(STUFF(sls_order_dt, 5, 0, '-'), 8, 0, '-') AS DATE)
                END,
                DATEADD(DAY, -3,
                    CASE 
                        WHEN LEN(sls_ship_dt) != 8 OR ISNUMERIC(sls_ship_dt) = 0 THEN NULL
                        ELSE CAST(STUFF(STUFF(sls_ship_dt, 5, 0, '-'), 8, 0, '-') AS DATE)
                    END
                )
            ),
            CASE 
                WHEN LEN(sls_ship_dt) != 8 OR ISNUMERIC(sls_ship_dt) = 0 THEN NULL
                ELSE CAST(STUFF(STUFF(sls_ship_dt, 5, 0, '-'), 8, 0, '-') AS DATE)
            END,
            CASE 
                WHEN LEN(sls_due_dt) != 8 OR ISNUMERIC(sls_due_dt) = 0 THEN NULL
                ELSE CAST(STUFF(STUFF(sls_due_dt, 5, 0, '-'), 8, 0, '-') AS DATE)
            END,
            sls_quantity,
            CASE 
                WHEN sls_sales IS NULL OR sls_sales < 0 OR sls_sales != sls_quantity * ABS(sls_price)
                THEN sls_quantity * ABS(sls_price)
                ELSE sls_sales
            END,
            CASE 
                WHEN sls_price IS NULL OR sls_price <= 0
                THEN sls_sales / NULLIF(sls_quantity, 0)
                ELSE sls_price
            END
        FROM bronze.crm_sales_details;
        SET @sectionEnd = GETDATE();
        PRINT 'Finished Load: silver.crm_sales_details in ' + CAST(DATEDIFF(SECOND, @sectionStart, @sectionEnd) AS VARCHAR) + ' seconds';

        -- Additional tables can be added similarly with timing and error checks

        DECLARE @totalTime INT = DATEDIFF(SECOND, @startTime, GETDATE());
        PRINT 'Completed Loading Silver Layer in ' + CAST(@totalTime AS VARCHAR) + ' seconds';

    END TRY
    BEGIN CATCH
        PRINT 'Error occurred: ' + ERROR_MESSAGE();
    END CATCH
END;
GO
